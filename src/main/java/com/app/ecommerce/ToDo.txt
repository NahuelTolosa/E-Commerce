ToDo

○User story/brief:

● Contendrá las rutas necesarias que permitan listar los productos existentes,
ingresar productos nuevos, borrar y modificar sus detalles, así como interactuar
con el carrito de compras.
- CRUD de productos.

● Se implementará una API RESTful con los verbos GET, POST, PUT y DELETE
para cumplir con todas las acciones necesarias.

● Con cada Request se deberá registrar un log al finalizar el mismo con AOP.

● En caso de detectar algún error, el servidor enviará mensaje de error con los
siguientes campos mínimos el id y el detalle del error.
- Se usa @ControllerAdvice para el Manejo de excepciones

● Debe brindar al frontend un mecanismo de ingreso autorizado al sistema
basado en JWT (Json Web Token).

● Los productos ingresados se almacenarán en una base de datos MongoDB.

● El usuario podrá registrar sus credenciales de acceso (email y password) para
luego poder ingresar a su cuenta. Estas credenciales serán guardadas en la
base de datos MongoDB encriptando la contraseña.
- CRUD de usuarios. (Lo principal Crear y Obtener)

● El cliente tendrá una sesión activa de usuario con tiempo de expiración
configurable.
- JWT se puede configurar el tiempo de vida del token

● La arquitectura del servidor estará basada en capas (MVC)

● El servidor podrá tomar configuraciones desde un archivo externo.

- Usar un Config-server para obtener las propiedades
● Se enviará un mail a una casilla configurable, por cada registro nuevo de usuario
y con cada orden de compra generada.

/////////////////////////////////////////////////////////////////////////////////////////////

● Inicio:

    ○ Para ingresar al sistema se debe enviar una petición a la ruta ‘/login’ y
    los datos a enviar son email y password. Y devolverá un JWT para
    usarlo en todas las peticiones al sistema.

    ○ Para registrar un usuario se debe enviar una petición a la ruta ‘/user’. Y
    consta del nombre completo del cliente, número telefónico, email y
    campo de password duplicado para verificar coincidencia.

    ○ Para listar los productos se usa la ruta ‘/productos’ y devolverá el
    listado de todos los productos disponibles para la compra.

    ○ La ruta /productos/:categoria devolverá los productos por la
    categoría requerida. (Pathparam o PathVariable)

    ○ Para agregar items al carrito se debe usar la ruta ‘/carrito/add’
        ■ En el cuerpo se debe mandar: code, cantidad.

    ○ Para listar los items del carrito se debe usar la ruta ‘/carrito’.

    ○ Se podrán modificar y borrar por su id a través de la ruta /carrito/:id.

/////////////////////////////////////////////////////////////////////////////////////////////

● Flow: Se puede solicitar un producto específico con la ruta /productos/:id,
donde id es el id del item generado por MongoDB (O usar un código
generado) y devolver la descripción del producto, precio (campo foto, stock,
etc opcionales).

/////////////////////////////////////////////////////////////////////////////////////////////

● Si se ingresa a /productos/:id y el producto no existe en MongoDB,
debemos responder un mensaje adecuado que indique algo relacionado a
que el producto no existe.

/////////////////////////////////////////////////////////////////////////////////////////////

● Redis: Con cada login que realiza el usuario verificar:

    ○ Si el usuario existe en redis, devolver el token JWT

    ○ Si el usuario no existe en Redis:
        ■ Guardar en redis el usuario con el token.
        ■ Key: username
        ■ Value: Token generado con JWT.
        ■ El tiempo de expiración del token es de 30 minutos en Redis.
        ■ Ir a la base de Datos para verificar las credenciales.

/////////////////////////////////////////////////////////////////////////////////////////////

● Log: cada request al finalizar o si hay una excepción mostrar en un log.info:
    ○ log.info en caso de éxito el método ejecutado y la fecha de ejecución.
    ○ log.error en caso de error el método ejecutado, la fecha de ejecución y
    el mensaje de la excepción.

/////////////////////////////////////////////////////////////////////////////////////////////

● MongoDB:
    ○ Implementar al menos estas colecciones:

        ■ usuarios: clientes registrados

        ■ productos: catálogo completo
            ● Link para foto (puede almacenarse de modo estático en
            la página en una subruta /images/:productoid )
            (Opcional)
            ● Precio unitario
            ● Descripción
            ● Categoría

        ■ carrito: orden temporal de compra
            ● Email
            ● Fecha y hora
            ● Items con sus cantidades
            ● Dirección de entrega

        ■ ordenes: las órdenes generadas, que deben incluir los
        productos, descripciones y los precios al momento de la
        compra.
            ● Ítems: las órdenes deben poder tener productos
            surtidos, cada uno con su cantidad. Por ejemplo:
            remeras x 2 y gorra x 1
            ● Número de orden: Se extrae de la cantidad de órdenes
            almacenadas
            ● Fecha y hora
            ● Estado ( por defecto en ‘generada’)
            ● Email de quién realizó la orden.

/////////////////////////////////////////////////////////////////////////////////////////////

● Finalizada la orden, enviar un mail a la dirección de mi cuenta con los detalles
de la orden.

/////////////////////////////////////////////////////////////////////////////////////////////

● Se dispondrá de un archivo de configuración externo con opciones para
desarrollo y otras para producción. Como parámetros de configuración estará
el puerto de escucha del servidor, la url de la base de datos, el mail que
recibirá notificaciones del backend, tiempo de expiración de sesión y los que
sea necesario incluir.